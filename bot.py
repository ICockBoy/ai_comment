from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

import asyncio
import random
from datetime import datetime

from aiogram.dispatcher.filters import IsReplyFilter, BoundFilter

from config import *
from states import *
from kb import *
from db_manage import *
from utils import *

bot = Bot(
    token=BOT_TOKEN,
    disable_web_page_preview=True,
    parse_mode='HTML'
)

dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(lambda message: message.text == 'üèò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state='*')
async def start_message_handler(message: types.Message, state: FSMContext):
    create_user_if_not_exist(message.from_user.id)
    await state.finish()
    user_data = get_user(message.chat.id)

    await message.answer(
        '<b>üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n' +
        f'<b>üëÄ –í–∞—à ID:</b> {message.chat.id}\n' +
        f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {user_data["balance"]} ‚ÇΩ\n' +
        f'<b>‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç:</b> {convert_timestamp_to_dt(user_data["sub_data_dt_expire"]).strftime("%d.%m.%Y")}\n' +
        f'<b>üîã –õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã:</b> {user_data["sub_data_account_limit"]}\n\n' +
        f'<b>üë• –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n' +
        # f'  -> TDATA: {len(user_data["accounts"]["td"])}\n'+
        f'  -> SESSION: {len(user_data["accounts"]["tl"])}\n' +
        f'  -> GPT: {len(get_user_tokens(message.chat.id))}',
        reply_markup=start_kb
    )


@dp.message_handler(commands=['start'], state='*')
async def start_command_handler(message: types.Message, state: FSMContext):
    referal_id = message.get_args()
    if referal_id:
        if referal_id!=str(message.chat.id):
            await bot.send_message(referal_id, f'–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è <a href="tg://user?id={referal_id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>! –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –µ–≥–æ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10%, –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.')
        else:
            referal_id = None
    create_user_if_not_exist(
        user_id=message.from_user.id,
        referal_id=int(referal_id) if referal_id else None
    )
    
    user_data = get_user(message.chat.id)

    await message.answer(
        '<b>üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n' +
        f'<b>üëÄ –í–∞—à ID:</b> {message.chat.id}\n' +
        f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {user_data["balance"]} ‚ÇΩ\n' +
        f'<b>‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç:</b> {convert_timestamp_to_dt(user_data["sub_data_dt_expire"]).strftime("%d.%m.%Y")}\n' +
        f'<b>üîã –õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã:</b> {user_data["sub_data_account_limit"]}\n\n' +
        f'<b>üë• –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n' +
        # f'  -> TDATA: {len(user_data["accounts"]["td"])}\n'+
        f'  -> SESSION: {len(user_data["accounts"]["tl"])}\n' +
        f'  -> GPT: {len(get_user_tokens(message.chat.id))}',
        reply_markup=start_kb
    )


@dp.callback_query_handler(lambda call: call.data == 'move_to_accounts_gpt_menu', state='*')
async def move_to_accounts_gpt_menu(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(f"–ö–æ–ª–∏—á–µ—Ç–≤–æ gpt —Ç–æ–∫–µ–Ω–æ–≤: {len(get_user_tokens(call.message.chat.id))}",
                              reply_markup=gpt_tokens_kb
                              )


@dp.callback_query_handler(lambda call: call.data == 'add_gpt_tokens', state='*')
async def add_gpt_tokens(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–ª—é—á–µ–π (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)</b>\n\n' +
                              '* –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "sk-"',
                              reply_markup=cancel_kb
                              )
    await state.set_state(GPTTokens.new_tokens)


@dp.message_handler(state=GPTTokens.new_tokens)
async def new_tokens(message: types.Message, state: FSMContext):
    tokens_all = get_user_tokens(message.chat.id)
    tokens = message.text.split()
    for token in tokens:
        if token.startswith("sk-") and token.count("sk-") == 1:
            tokens_all.append(token)
    set_user_tokens(message.chat.id, tokens_all)
    await message.answer(f"–ö–æ–ª–∏—á–µ—Ç–≤–æ gpt —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens_all)}",
                         reply_markup=gpt_tokens_kb
                         )
    await state.finish()


@dp.callback_query_handler(lambda call: call.data == 'my_referal_link', state='*')
async def my_referal_link_handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        '<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n' +
        f'https://t.me/NeyroComment_bot?start={call.message.chat.id}\n\n' +
        f'–ü—Ä–∏–≥–ª–∞—à–∞—è –ø–æ –Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 10% –æ—Ç —Å—É–º–º—ã –∏—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞'
    )


@dp.callback_query_handler(lambda call: call.data == 'cancel', state='*')
async def cancel_handler(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text('–û—Ç–º–µ–Ω–µ–Ω–æ')


@dp.callback_query_handler(lambda call: call.data == 'support', state='*')
async def support_handler(call: types.CallbackQuery, state: FSMContext):
    await SupportForm.message.set()

    await call.message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        reply_markup=cancel_kb
    )


@dp.message_handler(state=SupportForm.message)
async def support_form_message_step_handler(message: types.Message, state: FSMContext):
    for admin in ADMINS:
        await bot.send_message(chat_id=admin,
                               text=f'–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <tg-spoiler>[@{message.from_user.username}] |{message.chat.id}| ~{message.message_id}~</tg-spoiler>, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n{message.text}')
    await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=start_reply_kb)


class ReplyForwardFilterBot(BoundFilter):
    async def check(self, msg: types.Message):
        try:
            if msg.reply_to_message.text:
                return True
        except Exception:
            pass


@dp.message_handler(ReplyForwardFilterBot())
async def support_send_answer(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS:
        rtm = message.reply_to_message.text
        await bot.send_message(chat_id=rtm.split("|")[1],
                               text=f"–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}",
                               reply_to_message_id=rtm.split("~")[1])
        for admin in ADMINS:
            if admin != message.chat.id:
                await bot.send_message(chat_id=admin,
                                       text=f"–û–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å: "
        await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@dp.callback_query_handler(lambda call: call.data == 'sub_menu', state='*')
async def sub_menu_handler(call: types.CallbackQuery, state: FSMContext):
    subs = get_all_subs()

    subs_kb = types.InlineKeyboardMarkup()

    for sub in subs:
        subs_kb.add(
            types.InlineKeyboardButton(
                text=f'{int(sub["sub_data_dt_delta_expire"] / 86400)} –¥–Ω–µ–π ¬∑ {sub["sub_data_account_limit"]} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ¬∑ {sub["price"]} ‚ÇΩ',
                callback_data=f'buy_sub|{sub["id"]}'
            )
        )

    await call.message.answer(
        '<b>‚òòÔ∏è –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã</b>\n\n' +
        '‚ä¢ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ:\n\n' +
        '‚å™ 1 –∞–∫–∫–∞—É–Ω—Ç ‚â§ 25 –∫–∞–Ω–∞–ª–æ–≤\n' +
        '‚å™ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã',
        reply_markup=subs_kb
    )


@dp.callback_query_handler(lambda call: call.data.startswith('buy_sub'), state='*')
async def buy_sub_handler(call: types.CallbackQuery, state: FSMContext):
    _, sub_id = call.data.split('|')

    sub_id = int(sub_id)
    sub = get_sub_by_id(sub_id)

    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton(
            text='ü§ë –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏',
            callback_data=f'take_sub_choice|{sub["id"]}'
        )
    )
    kb.add(
        types.InlineKeyboardButton(
            text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            callback_data='sub_menu'
        )
    )

    await call.message.edit_text(
        '<b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω</b>\n\n' +
        f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π</b> ¬∑ {int(sub["sub_data_dt_delta_expire"] / 86400)} –¥–Ω–µ–π\n' +
        f'<b>–õ–∏–º–∏—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º</b> ¬∑ {sub["sub_data_account_limit"]} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n' +
        f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b> ¬∑ {sub["price"]} ‚ÇΩ',
        reply_markup=kb
    )


@dp.callback_query_handler(lambda call: call.data == 'popup_balance', state='*')
async def popup_balance_handler(call: types.CallbackQuery, state: FSMContext):
    await PopupBalanceForm.summ.set()

    await call.message.answer(
        '<b>üöÄ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å </b>\n\n' +
        '‚àü –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n' +
        f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - <b>{MIN_PAYMENT_SUMM} ‚ÇΩ</b>',
        reply_markup=cancel_kb
    )


@dp.message_handler(lambda message: message.text.isdigit, state=PopupBalanceForm.summ)
async def popup_balance_form_step_summ_handler(message: types.Message, state: FSMContext):
    summ = float(message.text)

    if summ < MIN_PAYMENT_SUMM:
        await message.answer(f'–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ <b>{MIN_PAYMENT_SUMM} ‚ÇΩ</b>')
        return

    payment_data = await create_payment(
        amount=summ,
        user_id=message.chat.id
    )

    await state.finish()

    kb = types.InlineKeyboardMarkup()

    kb.add(
        types.InlineKeyboardButton(
            text='–û–ø–ª–∞—Ç–∏—Ç—å',
            url=payment_data["url"]
        )
    )

    kb.add(
        types.InlineKeyboardButton(
            text='–Ø –æ–ø–ª–∞—Ç–∏–ª',
            callback_data=f'check_payment|{payment_data["bill_id"]}'
        )
    )

    await message.answer(
        '<b>–í–∞—à–∞ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞</b>\n\n' +
        f'–ö –æ–ø–ª–∞—Ç–µ <b>{summ} ‚ÇΩ</b>\n\n' +
        '–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ <b>–Ø –æ–ø–ª–∞—Ç–∏–ª</b>',
        reply_markup=kb
    )


@dp.callback_query_handler(lambda call: call.data.startswith('check_payment'), state='*')
async def check_payment_handler(call: types.CallbackQuery, state: FSMContext):
    _, bill_id = call.data.split('|')

    status = await check_payment(bill_id)

    if status is False:
        await call.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–∞ —Å—á–µ—Ç')
        return
    user = get_user(call.message.chat.id)
    user["referal_id"]
    amount = status
    if user:
        await bot.send_message(
            chat_id=user['referal_id'],
            text=f'üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount/10} ‚ÇΩ</b> –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ'
        )
        update_user_balance(
            user_id=user['referal_id'],
            value=amount/10
        )
    await call.message.edit_text(
        '<b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞' +
        '\n\n<b>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤, –∏–Ω–∞—á–µ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç !</b>'
    )


@dp.callback_query_handler(lambda call: call.data.startswith('take_sub_choice'), state='*')
async def take_sub_choice(call: types.CallbackQuery, state: FSMContext):
    _, sub_id = call.data.split('|')
    sub_id = int(sub_id)

    user = get_user(call.message.chat.id)
    sub = get_sub_by_id(sub_id)

    if user["balance"] < sub["price"]:
        await call.answer(
            '–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
            show_alert=True)
        return

    update_user_sub(
        user_id=call.message.chat.id,
        sub_data_dt_expire=sub["sub_data_dt_delta_expire"] + int(datetime.now().timestamp()),
        sub_data_account_limit=sub["sub_data_account_limit"]
    )

    r = update_user_balance(
        user_id=call.message.chat.id,
        value=sub["price"] * -1
    )

    await call.message.edit_text(
        '<b>‚úÖ –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω</b>\n\n' +
        '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É!'
    )


@dp.callback_query_handler(lambda call: call.data == 'my_sub', state='*')
async def my_sub_handler(call: types.CallbackQuery, state: FSMContext):
    user_data = get_user(call.message.chat.id)

    await call.message.answer(
        f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {user_data["balance"]} ‚ÇΩ\n' +
        f'<b>‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç:</b> {convert_timestamp_to_dt(user_data["sub_data_dt_expire"]).strftime("%d.%m.%Y")}\n' +
        f'<b>üîã –õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã:</b> {user_data["sub_data_account_limit"]}\n\n',
        reply_markup=payment_kb
    )


@dp.callback_query_handler(lambda call: call.data == 'remove_accounts', state='*')
async def remove_accounts_handler(call: types.CallbackQuery, state: FSMContext):
    old_remove_accounts(call.message.chat.id)
    await call.answer('–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')


@dp.callback_query_handler(lambda call: call.data == 'dump_accounts', state='*')
async def dump_accounts_handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
        reply_markup=accounts_dump_kb
    )


@dp.callback_query_handler(lambda call: call.data == 'dump_tdata', state='*')
async def dump_accounts_tdata_handler(call: types.CallbackQuery, state: FSMContext):
    user = get_user(call.message.chat.id)

    temp_arch_name = f'temp/{call.message.chat.id}_{random.randint(1, 99999999)}.zip'

    dump_accounts(
        file_paths=user["accounts"]["td"],
        zip_path=temp_arch_name
    )

    await call.message.answer_document(
        document=types.InputFile(temp_arch_name),
        caption='–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞ TDATA'
    )

    os.remove(temp_arch_name)


@dp.callback_query_handler(lambda call: call.data == 'dump_session', state='*')
async def dump_accounts_session_handler(call: types.CallbackQuery, state: FSMContext):
    user = get_user(call.message.chat.id)

    temp_arch_name = f'temp/{call.message.chat.id}_{random.randint(1, 99999999)}.zip'

    dump_accounts(
        file_paths=user["accounts"]["tl"],
        zip_path=temp_arch_name
    )

    await call.message.answer_document(
        document=types.InputFile(temp_arch_name),
        caption='–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞ Session'
    )

    os.remove(temp_arch_name)


@dp.callback_query_handler(lambda call: call.data.startswith('join_accounts'), state='*')
async def join_accounts_handler(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    if not can_user_working(call.message.chat.id):
        await call.message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞')
        return

    await AccountsJoinForm.channels.set()
    await state.update_data(phone=phone)

    await call.message.answer(
        text='<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>',
        reply_markup=cancel_kb
    )


@dp.message_handler(state=AccountsJoinForm.channels)
async def accounts_join_form_channels_step_handler(message: types.Message, state: FSMContext):
    links = message.text.splitlines()

    data = await state.get_data()
    await state.finish()

    asyncio.ensure_future(join_channels(phone=data['phone'], channels=links, owner_id=message.chat.id),
                          loop=asyncio.get_event_loop())
    await back_to_account_edit(message=message, data=data)


@dp.callback_query_handler(lambda call: call.data == 'append_accounts', state='*')
async def append_accounts_handler(call: types.CallbackQuery, state: FSMContext):
    if not can_user_add_accounts(call.message.chat.id):
        await call.message.answer('–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
        return

    if not can_user_working(call.message.chat.id):
        await call.message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞')
        return

    await AddAccountsForm.account_type.set()

    await call.message.edit_text(
        text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –≤–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>',
        reply_markup=accounts_type_kb
    )


@dp.callback_query_handler(lambda call: call.data.startswith('account_type_choice'), state=AddAccountsForm.account_type)
async def add_acccount_form_account_type_step_handler(call: types.CallbackQuery, state: FSMContext):
    _, account_type = call.data.split('|')

    await state.update_data(account_type=account_type)
    await AddAccountsForm.accounts_paths.set()

    if account_type == 'tdata':

        await call.message.edit_text(
            '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏</b>\n\n' +
            '–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –≤ –∞—Ä—Ö–∏–≤–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥–ø–∞–ø–æ–∫\n' +
            '–ê–∫–∫–∞—É–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞ TDATA –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
            'archive.zip/xxxx/tdata\n' +
            'archive.zip/xxxxx/tdata\n',
            reply_markup=cancel_kb
        )

    elif account_type == 'session':

        await call.message.edit_text(
            '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏</b>\n\n' +
            '–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –≤ –∞—Ä—Ö–∏–≤–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥–ø–∞–ø–æ–∫\n',
            reply_markup=cancel_kb
        )

    elif account_type == 'via_code':

        await AddAccountsForm.account_phone_num.set()

        await call.message.edit_text(
            '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É</b>',
            reply_markup=cancel_kb
        )


@dp.message_handler(state=AddAccountsForm.account_phone_num)
async def add_accounts_form_account_phone_num_step_handler(message: types.Message, state: FSMContext):
    await state.update_data(account_phone_num=message.text)

    await code_auth_send_code_step(
        phone=message.text,
        owner_id=message.chat.id
    )

    await AddAccountsForm.account_code.set()
    await state.update_data(account_code='')

    await message.answer(
        '<b>–ù–∞–±–µ—Ä–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—à–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ</b>\n\n' +
        f'–¢–µ–∫—É—â–∏–π –∫–æ–¥: ',
        reply_markup=code_input_kb
    )


@dp.callback_query_handler(lambda call: call.data.isdigit(), state=AddAccountsForm.account_code)
async def add_accounts_form_account_code_step_handler(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.update_data(account_code=data['account_code'] + call.data)

    data = await state.get_data()

    await call.message.edit_text(
        '<b>–ù–∞–±–µ—Ä–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—à–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ</b>\n\n' +
        f'–¢–µ–∫—É—â–∏–π –∫–æ–¥: {data["account_code"]}',
        reply_markup=code_input_kb
    )


@dp.callback_query_handler(lambda call: call.data == 'delete', state=AddAccountsForm.account_code)
async def add_accounts_form_account_code_step_handler(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.update_data(account_code=data['account_code'][:-1])

    data = await state.get_data()

    await call.message.edit_text(
        '<b>–ù–∞–±–µ—Ä–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—à–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ</b>\n\n' +
        f'–¢–µ–∫—É—â–∏–π –∫–æ–¥: {data["account_code"]}',
        reply_markup=code_input_kb
    )


@dp.callback_query_handler(lambda call: call.data == 'confirm', state=AddAccountsForm.account_code)
async def add_accounts_form_account_code_step_handler(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    session_data = await code_auth_sign_in_step(
        phone=data['account_phone_num'],
        code=data['account_code'],
        owner_id=call.message.chat.id
    )

    if session_data['status']:

        update_user_accounts(
            user_id=call.message.chat.id,
            accounts=[session_data['session_filename']],
            account_type='session'
        )

        await split_run_task(accounts=[session_data['session_filename']], type='session', owner_id=call.message.chat.id)

        await state.finish()
        await call.message.edit_text('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=append_accounts_independ_kb)

    elif not session_data['status'] and session_data['reason'] == '2FA':

        await AddAccountsForm.account_2fa_code.set()
        await call.message.edit_text(session_data['message'], reply_markup=cancel_kb)

    elif not session_data['status'] and session_data['reason'] == 'UNKNOWN':

        await state.finish()
        await call.message.edit_text(session_data['message'])


@dp.message_handler(state=AddAccountsForm.account_2fa_code)
async def add_accounts_form_account_2fa_code_step_handler(message: types.Message, state: FSMContext):
    password = message.text

    data = await state.get_data()

    session_data = await code_auth_sign_in_2fa_step(
        phone=data['account_phone_num'],
        code=data['account_code'],
        owner_id=message.chat.id,
        password=password
    )

    if session_data['status']:

        update_user_accounts(
            user_id=message.chat.id,
            accounts=[session_data['session_filename']],
            account_type='session'
        )

        await split_run_task(accounts=[session_data['session_filename']], type='session', owner_id=message.chat.id)

        await state.finish()
        await message.answer('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=append_accounts_independ_kb)

    elif not session_data['status'] and session_data['reason'] == '2FA':

        await AddAccountsForm.account_2fa_code.set()
        await message.answer(session_data['message'], reply_markup=cancel_kb)

    elif not session_data['status'] and session_data['reason'] == 'UNKNOWN':

        await state.finish()
        await message.answer(session_data['message'])


@dp.message_handler(state=AddAccountsForm.accounts_paths, content_types=['document'])
async def add_accounts_form_accounts_paths_step_handler(message: types.Message, state: FSMContext):
    filters = [
        not ".zip" in message.document.file_name,
        not ".rar" in message.document.file_name
    ]

    if all(filters):
        await message.answer('–¢–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
        return

    form_data = await state.get_data()

    if form_data["account_type"] == 'tdata':

        rnd_temp_path = f'temp/{message.chat.id}_{random.randint(1, 9999999999)}.{"zip" if message.document.mime_type == "application/zip" else "rar"}'

        await message.document.download(rnd_temp_path)
        accounts = unpack_archive(rnd_temp_path, 'accounts/td')

        update_user_accounts(
            user_id=message.chat.id,
            accounts=accounts,
            account_type='tdata'
        )

    elif form_data["account_type"] == "session":

        rnd_temp_path = f'temp/{message.chat.id}_{random.randint(1, 9999999999)}.{"zip" if message.document.mime_type == "application/zip" else "rar"}'

        await message.document.download(rnd_temp_path)
        accounts = unpack_archive(rnd_temp_path, 'accounts/tl')
        update_user_accounts(
            user_id=message.chat.id,
            accounts=accounts,
            account_type='session'
        )

    await state.finish()
    await message.answer('–ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!', reply_markup=append_accounts_independ_kb)

    # asyncio.ensure_future(run_user_tasks([get_user(message.chat.id)]), loop=asyncio.get_event_loop())
    await split_run_task(accounts=accounts, type=form_data["account_type"], owner_id=message.chat.id)

    os.remove(rnd_temp_path)


@dp.callback_query_handler(lambda call: call.data.startswith('rcomm'), state='*')
async def remove_comment_handler(call: types.CallbackQuery, state: FSMContext):
    _, account_id, channel_id, message_id = call.data.split('|')

    await remove_comment(
        account_id=int(account_id),
        channel_id=int(channel_id),
        message_id=int(message_id)
    )

    await call.message.edit_text('<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω</b>')


@dp.callback_query_handler(lambda call: call.data.startswith('ecomm'), state='*')
async def edit_comment_handler(call: types.CallbackQuery, state: FSMContext):
    _, account_id, channel_id, message_id = call.data.split('|')

    await EditCommentForm.new_content.set()

    await state.update_data(account_id=int(account_id))
    await state.update_data(channel_id=int(channel_id))
    await state.update_data(message_id=int(message_id))

    await call.message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è',
        reply_markup=cancel_kb
    )


@dp.message_handler(state=EditCommentForm.new_content)
async def edit_comment_form_new_content_step_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.finish()

    await edit_comment(
        account_id=data['account_id'],
        channel_id=data['channel_id'],
        message_id=data['message_id'],
        new_content=message.text
    )

    await message.answer(
        '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ'
    )


@dp.callback_query_handler(lambda call: call.data.startswith('rm_acc'), state='*')
async def remove_account_handler(call: types.CallbackQuery, state: FSMContext):
    _, account_path = call.data.split('|')

    await remove_account(
        account_path=account_path,
        owner_id=call.message.chat.id
    )

    await call.message.edit_text(
        text='–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω'
    )


@dp.callback_query_handler(lambda call: call.data.startswith('account_edit_lname'), state='*')
async def account_edit_lname_handler(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    if not can_user_working(call.message.chat.id):
        await call.message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞')
        return

    await EditAccountLastName.lname.set()
    await state.update_data(phone=phone)

    await call.message.answer(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –§–∞–º–∏–ª–∏—é</b>\n\n' +
        '–§–∞–º–∏–ª–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤',
        reply_markup=cancel_kb
    )


@dp.message_handler(state=EditAccountLastName.lname)
async def edit_account_last_name_lname_step_handler(message: types.Message, state: FSMContext):
    if len(message.text) > 20:
        await message.answer('–§–∞–º–∏–ª–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤')

    data = await state.get_data()
    await state.finish()

    await update_last_name(phone=data['phone'], last_name=message.text, owner_id=message.chat.id)
    await back_to_account_edit(message=message, data=data)

@dp.callback_query_handler(lambda call: call.data.startswith('account_edit_uname'), state='*')
async def account_edit_uname_handler(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    if not can_user_working(call.message.chat.id):
        await call.message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞')
        return

    await EditAccountUsername.username.set()
    await state.update_data(phone=phone)

    await call.message.answer(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ—ã–≤—ã–π –Æ–∑–µ—Ä–Ω–µ–π–º</b>\n\n' +
        '–Æ–∑–µ—Ä–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤',
        reply_markup=cancel_kb
    )

@dp.message_handler(state=EditAccountUsername.username)
async def editaccountusername_username(message: types.Message, state: FSMContext):
    if len(message.text) > 20 and len(message.text) < 5:
        await message.answer('–Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 20 —Å–∏–º–æ–≤–ª–æ–≤!')
        return

    data = await state.get_data()
    await state.finish()

    await update_username(phone=data['phone'], username=message.text.replace("@", ""), owner_id=message.chat.id)
    await back_to_account_edit(message=message, data=data)


@dp.callback_query_handler(lambda call: call.data.startswith('account_edit_fname'), state='*')
async def account_edit_fname_handler(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    if not can_user_working(call.message.chat.id):
        await call.message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞')
        return

    await EditAccountFirstName.fname.set()
    await state.update_data(phone=phone)

    await call.message.answer(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ò–º—è</b>\n\n' +
        '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤',
        reply_markup=cancel_kb
    )


@dp.message_handler(state=EditAccountFirstName.fname)
async def edit_account_first_name_fname_step_handler(message: types.Message, state: FSMContext):
    if len(message.text) > 20:
        await message.answer('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤!')
        return

    data = await state.get_data()
    await state.finish()

    await update_first_name(phone=data['phone'], first_name=message.text, owner_id=message.chat.id)
    await back_to_account_edit(message=message, data=data)


@dp.callback_query_handler(lambda call: call.data.startswith('account_edit_bio'), state='*')
async def account_edit_bio_handler(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    if not can_user_working(call.message.chat.id):
        await call.message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞')
        return

    await EditAccountBio.bio.set()
    await state.update_data(phone=phone)

    await call.message.answer(
        '<b>üñá –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n\n' +
        '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 70 —Å–∏–º–≤–æ–ª–æ–≤',
        reply_markup=cancel_kb
    )


@dp.message_handler(state=EditAccountBio.bio)
async def edit_account_bio_bio_step_handler(message: types.Message, state: FSMContext):
    if len(message.text) > 70:
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 70 —Å–∏–º–≤–æ–ª–æ–≤')
        return

    data = await state.get_data()
    await state.finish()

    await update_bio(phone=data['phone'], bio=message.text, owner_id=message.chat.id)
    await back_to_account_edit(message=message, data=data)


@dp.callback_query_handler(lambda call: call.data.startswith('account_edit_avatar'), state='*')
async def account_edit_avatar_handler(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    if not can_user_working(call.message.chat.id):
        await call.message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞')
        return

    await EditAccountAvatar.photo.set()
    await state.update_data(phone=phone)

    await call.message.answer(
        '<b>üé® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É</b>',
        reply_markup=cancel_kb
    )


@dp.callback_query_handler(lambda call: call.data.startswith('leave_channel_accounts'), state='*')
async def leave_channel_accounts_hanlder(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    if not can_user_working(call.message.chat.id):
        await call.message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞')
        return

    channels = await get_channels_data(
        phone=phone,
        owner_id=call.message.chat.id
    )

    kb = types.InlineKeyboardMarkup(row_width=5)

    for channel in channels:
        kb.add(
            types.InlineKeyboardButton(
                text=channel['name'],
                callback_data=f'leave_channel|{phone}|{channel["id"]}'
            )
        )

    kb.add(cancel_btn)

    await call.message.answer(
        text='<b>üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å</b>',
        reply_markup=kb
    )


@dp.callback_query_handler(lambda call: call.data.startswith('check_spam'), state='*')
async def check_spam_handler(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    m = await call.message.answer('<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –±–ª–æ–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...</b>')

    status = await check_spam_block(
        phone=phone,
        owner_id=call.message.chat.id
    )

    if not status:

        await m.edit_text(
            f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{phone}</b> —Å–≤–æ–±–æ–¥–µ–Ω –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'
        )

    else:

        await m.edit_text(
            f'üö´ –ê–∫–∫–∞—É–Ω—Ç <b>{phone}</b> –ø–æ–ø–∞–ª –ø–æ–¥ —Å–ø–∞–º –±–ª–æ–∫'
        )


@dp.callback_query_handler(lambda call: call.data.startswith('leave_channel'), state='*')
async def leave_channel_handler(call: types.CallbackQuery, state: FSMContext):
    _, phone, channel_id = call.data.split('|')

    await leave_channel(
        phone=phone,
        owner_id=call.message.chat.id,
        channel_id=int(channel_id)
    )

    await back_to_account_edit(
        message=call.message,
        data={"phone": phone}
    )


async def back_to_account_edit(message: types.Message, data: dict):
    m = await message.answer('<b>üïñ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...</b>')

    r = await get_account_info(
        phone=data['phone'],
        owner_id=message.chat.id
    )

    await m.delete()

    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton(
            text='üé® –ê–≤–∞—Ç–∞—Ä–∫–∞',
            callback_data=f'account_edit_avatar|{data["phone"]}'
        ),
        types.InlineKeyboardButton(
            text='üñá –û–ø–∏—Å–∞–Ω–∏–µ',
            callback_data=f'account_edit_bio|{data["phone"]}'
        )
    )

    kb.row(
        types.InlineKeyboardButton(
            text='üëî –ò–º—è',
            callback_data=f'account_edit_fname|{data["phone"]}'
        ),
        types.InlineKeyboardButton(
            text='üéΩ –§–∞–º–∏–ª–∏—è',
            callback_data=f'account_edit_lname|{data["phone"]}'
        )
    )
    kb.row(
        types.InlineKeyboardButton(
            text='üìù –Æ–∑–µ—Ä–Ω–µ–π–º',
            callback_data=f'account_edit_uname|{data["phone"]}'
        )
    )
    kb.row(
        types.InlineKeyboardButton(
            text='‚Ü©Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å',
            callback_data=f'join_accounts|{data["phone"]}'
        ),
        types.InlineKeyboardButton(
            text='üóë –û—Ç–ø–∏—Å–∞—Ç—å',
            callback_data=f'leave_channel_accounts|{data["phone"]}'
        )
    )
    kb.add(
        types.InlineKeyboardButton(
            text='üîí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º –±–ª–æ–∫',
            callback_data=f'check_spam|{data["phone"]}'
        )
    )
    kb.add(
        types.InlineKeyboardButton(
            text='‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
            callback_data=f'rm_sess|{data["phone"]}'
        )
    )

    kb.add(
        types.InlineKeyboardButton(
            text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            callback_data='move_to_accounts_menu'
        )
    )

    if r['photo']:

        await bot.send_photo(
            chat_id=message.chat.id,
            photo=types.InputFile(r['photo']),
            caption=f'<b>–ê–∫–∫–∞—É–Ω—Ç +{data["phone"]}</b>\n\n' +
                    f"–ò–º—è: {r['first_name']}\n" +
                    f"–§–∞–º–∏–ª–∏—è: {r['last_name']}\n" +
                    f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{r['username']}\n" +
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {r['about']}\n\n" +
                    f"<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b> {len(r['channels'])}",
            reply_markup=kb
        )

    else:

        await bot.send_message(
            chat_id=message.chat.id,
            text=f'<b>–ê–∫–∫–∞—É–Ω—Ç +{data["phone"]}</b>\n\n' +
                 f"–ò–º—è: {r['first_name']}\n" +
                 f"–§–∞–º–∏–ª–∏—è: {r['last_name']}\n" +
                 f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{r['username']}\n" +
                 f"–û–ø–∏—Å–∞–Ω–∏–µ: {r['about']}\n\n" +
                 f"<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b> {len(r['channels'])}",
            reply_markup=kb
        )


@dp.message_handler(state=EditAccountAvatar.photo, content_types=['photo'])
async def account_edit_avatar_photo_step_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()

    await state.finish()

    dest = await message.photo[-1].download('temp')
    dest = dest.name

    await update_profile_photo(phone=data['phone'], photo_path=dest, owner_id=message.chat.id)
    await back_to_account_edit(message, data)


@dp.callback_query_handler(lambda call: call.data == 'edit_accounts_menu', state='*')
async def edit_accounts_menu_handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        '<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>',
        reply_markup=accounts_edit_kb
    )


@dp.callback_query_handler(lambda call: call.data == 'move_to_main_menu', state='*')
async def move_to_main_menu_handler(call: types.CallbackQuery, state: FSMContext):
    user_data = get_user(call.message.chat.id)

    await call.message.edit_text(
        '<b>üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n' +
        f'<b>üëÄ –í–∞—à ID:</b> {call.message.chat.id}\n' +
        f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {user_data["balance"]} ‚ÇΩ\n' +
        f'<b>‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç:</b> {convert_timestamp_to_dt(user_data["sub_data_dt_expire"]).strftime("%d.%m.%Y")}\n' +
        f'<b>üîã –õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã:</b> {user_data["sub_data_account_limit"]}\n\n' +
        f'<b>üë• –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n'
        # f'  -> TDATA: {len(user_data["accounts"]["td"])}\n'+
        f'  -> SESSION: {len(user_data["accounts"]["tl"])}\n' +
        f'  -> GPT: {len(get_user_tokens(call.message.chat.id))}',
        reply_markup=start_kb
    )


@dp.callback_query_handler(lambda call: call.data == 'move_to_accounts_menu', state='*')
async def move_to_accounts_menu_handler(call: types.CallbackQuery, state: FSMContext):
    if not can_user_working(call.message.chat.id):
        await call.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É')
        return

    m = await call.message.answer(
        '<b>üïñ –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–∞–º...</b>\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')
    await call.message.delete()

    accounts = await get_accounts_info(call.message.chat.id)
    accounts_kb = types.InlineKeyboardMarkup()

    for account in accounts:
        accounts_kb.add(
            types.InlineKeyboardButton(
                text=f'ü´° {account["phone"]} {account["first_name"]} {account["last_name"]}',
                callback_data=f'm_account|{account["phone"]}'
            )
        )

    accounts_kb.row(
        types.InlineKeyboardButton(
            text='‚§¥Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã',
            callback_data='append_accounts'
        )
    )
    accounts_kb.add(
        types.InlineKeyboardButton(
            text='‚§µÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã',
            callback_data='dump_accounts'
        )
    )
    accounts_kb.add(
        types.InlineKeyboardButton(
            text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            callback_data='move_to_main_menu'
        )
    )

    await m.edit_text(
        '<b>üë• –ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>',
        reply_markup=accounts_kb
    )


@dp.callback_query_handler(lambda call: call.data.startswith('rm_sess'), state='*')
async def rm_sess(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    await close_client(
        phone=phone,
        owner_id=call.message.chat.id
    )

    await call.message.delete()
    await call.message.answer(f'–ê–∫–∫–∞—É–Ω—Ç <b>{phone}</b> –±—ã–ª —É–¥–∞–ª–µ–Ω')


@dp.callback_query_handler(lambda call: call.data.startswith('m_account'), state='*')
async def m_account_handler(call: types.CallbackQuery, state: FSMContext):
    _, phone = call.data.split('|')

    await call.message.edit_text('<b>üïñ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...</b>')

    r = await get_account_info(
        phone=phone,
        owner_id=call.message.chat.id
    )

    await call.message.delete()

    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton(
            text='üé® –ê–≤–∞—Ç–∞—Ä–∫–∞',
            callback_data=f'account_edit_avatar|{phone}'
        ),
        types.InlineKeyboardButton(
            text='üñá –û–ø–∏—Å–∞–Ω–∏–µ',
            callback_data=f'account_edit_bio|{phone}'
        )
    )

    kb.row(
        types.InlineKeyboardButton(
            text='üëî –ò–º—è',
            callback_data=f'account_edit_fname|{phone}'
        ),
        types.InlineKeyboardButton(
            text='üéΩ –§–∞–º–∏–ª–∏—è',
            callback_data=f'account_edit_lname|{phone}'
        )
    )
    kb.row(
        types.InlineKeyboardButton(
            text='üìù –Æ–∑–µ—Ä–Ω–µ–π–º',
            callback_data=f'account_edit_uname|{phone}'
        )
    )
    kb.row(
        types.InlineKeyboardButton(
            text='‚Ü©Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å',
            callback_data=f'join_accounts|{phone}'
        ),
        types.InlineKeyboardButton(
            text='üóë –û—Ç–ø–∏—Å–∞—Ç—å',
            callback_data=f'leave_channel_accounts|{phone}'
        )
    )
    kb.add(
        types.InlineKeyboardButton(
            text='üîí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º –±–ª–æ–∫',
            callback_data=f'check_spam|{phone}'
        )
    )
    kb.add(
        types.InlineKeyboardButton(
            text='‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
            callback_data=f'rm_sess|{phone}'
        )
    )

    kb.add(
        types.InlineKeyboardButton(
            text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            callback_data='move_to_accounts_menu'
        )
    )

    if len(r['channels']) > 20:
        r['channels'] = r['channels'][:20]

    if r['photo']:

        await bot.send_photo(
            chat_id=call.message.chat.id,
            photo=types.InputFile(r['photo']),
            caption=f'<b>–ê–∫–∫–∞—É–Ω—Ç +{phone}</b>\n\n' +
                    f"–ò–º—è: {r['first_name']}\n" +
                    f"–§–∞–º–∏–ª–∏—è: {r['last_name']}\n" +
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {r['about']}\n\n" +
                    f"<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n" +
                    '\n'.join([f'<i>{channel}</i>' for channel in r['channels']]),
            reply_markup=kb
        )

    else:

        await bot.send_message(
            chat_id=call.message.chat.id,
            text=f'<b>–ê–∫–∫–∞—É–Ω—Ç +{phone}</b>\n\n' +
                 f"–ò–º—è: {r['first_name']}\n" +
                 f"–§–∞–º–∏–ª–∏—è: {r['last_name']}\n" +
                 f"–û–ø–∏—Å–∞–Ω–∏–µ: {r['about']}\n\n" +
                 f"<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n" +
                 '\n'.join([f'<i>{channel}</i>' for channel in r['channels']]),
            reply_markup=kb
        )

@dp.message_handler(commands=['admin'], state='*')
async def admin_command_handler(message: types.Message, state: FSMContext):
    if message.chat.id in ADMINS:
        await message.answer('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=admin_kb)


@dp.callback_query_handler(lambda call: call.data == 'admin_add_keys' and call.message.chat.id in ADMINS, state='*')
async def admin_send_message_for_all(call: types.CallbackQuery, state: FSMContext):
    await AdminAddKeys.keys.set()

    await call.message.answer(
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–æ—Å–ª–∞—Ç—å –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ</b>',
        reply_markup=cancel_kb
    )


@dp.message_handler(state=AdminAddKeys.keys)
async def admin_add_keys_keys_step_handler(message: types.Message, state: FSMContext):
    users = get_all_users()
    await state.finish()
    for user in users:
        try:
            await bot.send_message(chat_id=user["user_id"], text=message.text)
        except:
            print(user["user_id"], "error")


async def on_bot_startup_handler(*args):
    users = get_all_users()
    await run_user_tasks(users)
    print("bot_started!")


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_bot_startup_handler)
